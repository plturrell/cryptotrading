{
  "name": "agent-manager-mcp-tools",
  "version": "1.0.0",
  "description": "MCP tools for A2A Agent Manager - handles registration, compliance, and lifecycle management",
  "tools": {
    "register_agent": {
      "description": "Register a new agent with A2A network and blockchain",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Unique identifier for the agent"
        },
        "agent_type": {
          "type": "string",
          "description": "Type of agent (e.g., trading_algorithm, data_analysis)"
        },
        "capabilities": {
          "type": "array",
          "items": "string",
          "description": "List of agent capabilities"
        },
        "mcp_tools": {
          "type": "array",
          "items": "string",
          "description": "MCP tools the agent requires"
        },
        "skill_card": {
          "type": "object",
          "description": "Agent skill card with metadata"
        },
        "blockchain_register": {
          "type": "boolean",
          "description": "Register on blockchain",
          "default": true
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "registration_id": "string",
          "compliance_score": "number",
          "blockchain_tx": "string",
          "status": "string"
        }
      }
    },
    "validate_compliance": {
      "description": "Validate A2A compliance for an agent",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Agent to validate"
        },
        "capabilities": {
          "type": "array",
          "items": "string",
          "description": "Capabilities to validate"
        },
        "mcp_tools": {
          "type": "array",
          "items": "string",
          "description": "MCP tools to check for segregation"
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "compliant": "boolean",
          "score": "number",
          "violations": "array",
          "recommendations": "array"
        }
      }
    },
    "enforce_mcp_segregation": {
      "description": "Enforce MCP tool segregation for an agent",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Agent ID"
        },
        "requested_tools": {
          "type": "array",
          "items": "string",
          "description": "Tools requested by agent"
        },
        "agent_capabilities": {
          "type": "array",
          "items": "string",
          "description": "Agent's declared capabilities"
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "approved_tools": "array",
          "denied_tools": "array",
          "reason": "string"
        }
      }
    },
    "generate_skill_card": {
      "description": "Generate A2A compliant skill card for an agent",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Agent ID"
        },
        "capabilities": {
          "type": "array",
          "items": "string",
          "description": "Agent capabilities"
        },
        "performance_metrics": {
          "type": "object",
          "description": "Agent performance data",
          "optional": true
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "skill_card": "object",
          "validation_status": "string",
          "compliance_level": "string"
        }
      }
    },
    "blockchain_register": {
      "description": "Register agent on blockchain",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Agent to register"
        },
        "skill_card": {
          "type": "object",
          "description": "Agent skill card"
        },
        "registry_contract": {
          "type": "string",
          "description": "Blockchain registry contract address",
          "optional": true
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "transaction_hash": "string",
          "block_number": "number",
          "registry_address": "string",
          "gas_used": "number"
        }
      }
    },
    "manage_lifecycle": {
      "description": "Manage agent lifecycle (start, stop, restart)",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Agent to manage"
        },
        "action": {
          "type": "string",
          "enum": ["start", "stop", "restart", "health_check"],
          "description": "Lifecycle action"
        },
        "force": {
          "type": "boolean",
          "description": "Force action even if unhealthy",
          "default": false
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "status": "string",
          "health": "object",
          "message": "string"
        }
      }
    },
    "query_registry": {
      "description": "Query agent registry (local and blockchain)",
      "parameters": {
        "filter": {
          "type": "object",
          "description": "Query filters",
          "properties": {
            "agent_type": "string",
            "capabilities": "array",
            "status": "string",
            "blockchain_only": "boolean"
          },
          "optional": true
        }
      },
      "returns": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "agent_id": "string",
            "status": "string",
            "capabilities": "array",
            "blockchain_address": "string"
          }
        }
      }
    },
    "audit_compliance": {
      "description": "Audit all agents for A2A compliance",
      "parameters": {
        "include_blockchain": {
          "type": "boolean",
          "description": "Include blockchain verification",
          "default": true
        },
        "detailed_report": {
          "type": "boolean",
          "description": "Generate detailed compliance report",
          "default": false
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "compliant_agents": "array",
          "non_compliant_agents": "array",
          "total_score": "number",
          "report": "object"
        }
      }
    },
    "configure_network": {
      "description": "Configure A2A network settings",
      "parameters": {
        "network_config": {
          "type": "object",
          "description": "Network configuration",
          "properties": {
            "discovery_enabled": "boolean",
            "heartbeat_interval": "number",
            "max_agents": "number",
            "blockchain_network": "string"
          }
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "status": "string",
          "applied_config": "object"
        }
      }
    },
    "monitor_health": {
      "description": "Monitor health of all registered agents",
      "parameters": {
        "include_metrics": {
          "type": "boolean",
          "description": "Include performance metrics",
          "default": true
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "healthy_agents": "array",
          "unhealthy_agents": "array",
          "metrics": "object",
          "recommendations": "array"
        }
      }
    },
    "send_alert": {
      "description": "Send system alerts through configured channels",
      "parameters": {
        "alert_type": {
          "type": "string",
          "enum": ["agent_down", "compliance_violation", "performance_issue", "security_alert", "system_error"],
          "description": "Type of alert"
        },
        "severity": {
          "type": "string",
          "enum": ["low", "medium", "high", "critical"],
          "description": "Alert severity"
        },
        "message": {
          "type": "string",
          "description": "Alert message"
        },
        "agent_id": {
          "type": "string",
          "description": "Related agent ID",
          "optional": true
        },
        "channels": {
          "type": "array",
          "items": "string",
          "description": "Delivery channels (slack, email, webhook)",
          "optional": true
        }
      }
    },
    "configure_alerts": {
      "description": "Configure alert delivery settings",
      "parameters": {
        "channel_type": {
          "type": "string",
          "enum": ["slack", "email", "webhook", "pagerduty"],
          "description": "Channel type"
        },
        "config": {
          "type": "object",
          "description": "Channel configuration"
        },
        "severity_filter": {
          "type": "array",
          "items": "string",
          "description": "Severities to send",
          "optional": true
        }
      }
    },
    "check_wallet_balance": {
      "description": "Check agent wallet balance on blockchain",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Agent ID"
        },
        "network": {
          "type": "string",
          "enum": ["ethereum", "bsc", "polygon", "arbitrum", "local_anvil"],
          "description": "Blockchain network",
          "default": "local_anvil"
        },
        "include_tokens": {
          "type": "boolean",
          "description": "Include ERC20 token balances",
          "default": false
        }
      }
    },
    "execute_blockchain_tx": {
      "description": "Execute blockchain transaction for agent operations",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Agent executing transaction"
        },
        "tx_type": {
          "type": "string",
          "enum": ["register", "update_status", "send_message", "update_capabilities"],
          "description": "Transaction type"
        },
        "data": {
          "type": "object",
          "description": "Transaction data"
        },
        "network": {
          "type": "string",
          "default": "local_anvil"
        }
      }
    },
    "monitor_defi": {
      "description": "Monitor DeFi protocols for agent operations",
      "parameters": {
        "protocols": {
          "type": "array",
          "items": "string",
          "description": "DeFi protocols to monitor"
        },
        "metrics": {
          "type": "array",
          "items": "string",
          "enum": ["tvl", "apy", "volume", "fees"],
          "description": "Metrics to track"
        },
        "alert_thresholds": {
          "type": "object",
          "description": "Alert thresholds for metrics",
          "optional": true
        }
      }
    },
    "manage_gas": {
      "description": "Manage gas optimization for agent transactions",
      "parameters": {
        "network": {
          "type": "string",
          "description": "Blockchain network"
        },
        "operation": {
          "type": "string",
          "description": "Operation to optimize"
        },
        "max_gas_price": {
          "type": "number",
          "description": "Maximum gas price in gwei",
          "optional": true
        }
      }
    },
    "register_with_cds": {
      "description": "Register agent with CDS service and enable monitoring",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Agent ID"
        },
        "capabilities": {
          "type": "object",
          "description": "Agent capabilities for CDS registration"
        },
        "cds_endpoint": {
          "type": "string",
          "description": "CDS service endpoint",
          "default": "http://localhost:4005"
        },
        "enable_monitoring": {
          "type": "boolean",
          "description": "Enable CDS monitoring",
          "default": true
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "cds_registration_id": "string",
          "monitoring_enabled": "boolean",
          "status": "string"
        }
      }
    },
    "query_cds_metrics": {
      "description": "Query CDS integration metrics and monitoring data",
      "parameters": {
        "agent_id": {
          "type": "string",
          "description": "Agent ID",
          "optional": true
        },
        "metric_type": {
          "type": "string",
          "enum": ["performance", "operations", "errors", "transactions"],
          "description": "Type of metrics to query",
          "optional": true
        },
        "time_range": {
          "type": "string",
          "description": "Time range for metrics (1h, 24h, 7d)",
          "default": "24h"
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "metrics": "object",
          "agent_stats": "array",
          "system_health": "object"
        }
      }
    },
    "track_contracts": {
      "description": "Track smart contracts for agent interactions",
      "parameters": {
        "contracts": {
          "type": "array",
          "items": "object",
          "description": "Contract addresses and ABIs"
        },
        "events": {
          "type": "array",
          "items": "string",
          "description": "Events to monitor"
        },
        "real_time": {
          "type": "boolean",
          "default": true
        }
      }
    }
  },
  "capabilities": {
    "registration": [
      "a2a_registration",
      "blockchain_registration",
      "skill_card_generation",
      "compliance_validation"
    ],
    "management": [
      "lifecycle_management",
      "health_monitoring",
      "performance_tracking",
      "network_configuration",
      "alert_management",
      "notification_delivery"
    ],
    "compliance": [
      "mcp_segregation",
      "a2a_compliance",
      "audit_reporting",
      "violation_detection"
    ],
    "blockchain": [
      "smart_contract_interaction",
      "registry_management",
      "transaction_tracking",
      "wallet_management",
      "gas_optimization",
      "multi_chain_support"
    ],
    "defi": [
      "protocol_monitoring",
      "liquidity_tracking",
      "yield_analysis",
      "dex_integration"
    ],
    "alerts": [
      "multi_channel_delivery",
      "slack_integration",
      "email_notifications",
      "webhook_support",
      "rate_limiting",
      "priority_handling"
    ],
    "cds_integration": [
      "cds_registration",
      "monitoring_integration",
      "transactional_operations",
      "metrics_collection",
      "health_tracking",
      "performance_analysis"
    ]
  }
}