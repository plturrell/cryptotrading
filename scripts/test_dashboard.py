#!/usr/bin/env python3
"""
Test Real-time Dashboard Functionality
Comprehensive test of dashboard features and real-time capabilities
"""

import asyncio
import json
import sys
import tempfile
import time
from pathlib import Path
import aiohttp

# Add src to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "src"))


async def test_dashboard_api(dashboard_url: str = "http://localhost:8090"):
    """Test dashboard API endpoints"""
    print("üß™ DASHBOARD API TEST")
    print("=" * 50)
    
    async with aiohttp.ClientSession() as session:
        try:
            # Test 1: Basic connectivity
            print("\n1Ô∏è‚É£ Testing basic connectivity...")
            async with session.get(f"{dashboard_url}/api/metrics") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"   ‚úÖ Metrics endpoint: {response.status}")
                    print(f"      ‚Ä¢ Files watched: {data.get('total_files_watched', 0)}")
                    print(f"      ‚Ä¢ Changes detected: {data.get('changes_detected', 0)}")
                    print(f"      ‚Ä¢ Analyses completed: {data.get('analyses_completed', 0)}")
                    print(f"      ‚Ä¢ AI insights: {data.get('ai_insights_generated', 0)}")
                else:
                    print(f"   ‚ùå Metrics endpoint: {response.status}")
            
            # Test 2: Recent changes
            print("\n2Ô∏è‚É£ Testing recent changes endpoint...")
            async with session.get(f"{dashboard_url}/api/changes") as response:
                if response.status == 200:
                    data = await response.json()
                    changes = data.get('recent_changes', [])
                    print(f"   ‚úÖ Changes endpoint: {len(changes)} recent changes")
                    if changes:
                        latest = changes[-1]
                        file_name = Path(latest.get('file_path', 'unknown')).name
                        print(f"      ‚Ä¢ Latest: {file_name} ({latest.get('change_type', 'unknown')})")
                else:
                    print(f"   ‚ùå Changes endpoint: {response.status}")
            
            # Test 3: Recent analyses
            print("\n3Ô∏è‚É£ Testing recent analyses endpoint...")
            async with session.get(f"{dashboard_url}/api/analyses") as response:
                if response.status == 200:
                    data = await response.json()
                    analyses = data.get('recent_analyses', [])
                    print(f"   ‚úÖ Analyses endpoint: {len(analyses)} recent analyses")
                    if analyses:
                        latest = analyses[-1]
                        file_name = Path(latest.get('file_path', 'unknown')).name
                        symbols_count = len(latest.get('symbols_found', []))
                        ai_enhanced = "ü§ñ" if latest.get('ai_insights') else ""
                        print(f"      ‚Ä¢ Latest: {file_name} ({symbols_count} symbols) {ai_enhanced}")
                else:
                    print(f"   ‚ùå Analyses endpoint: {response.status}")
            
            # Test 4: System status
            print("\n4Ô∏è‚É£ Testing system status endpoint...")
            async with session.get(f"{dashboard_url}/api/status") as response:
                if response.status == 200:
                    data = await response.json()
                    realtime_status = data.get('realtime_status', 'unknown')
                    print(f"   ‚úÖ Status endpoint: Real-time monitoring {realtime_status}")
                    
                    watcher_stats = data.get('watcher_statistics', {})
                    if watcher_stats:
                        print(f"      ‚Ä¢ Queue size: {watcher_stats.get('queue_stats', {}).get('queued', 0)}")
                        print(f"      ‚Ä¢ Active tasks: {watcher_stats.get('active_analysis_tasks', 0)}")
                        print(f"      ‚Ä¢ Uptime: {watcher_stats.get('uptime_seconds', 0):.1f}s")
                else:
                    print(f"   ‚ùå Status endpoint: {response.status}")
            
            # Test 5: Dashboard HTML
            print("\n5Ô∏è‚É£ Testing dashboard HTML...")
            async with session.get(dashboard_url) as response:
                if response.status == 200:
                    html = await response.text()
                    print(f"   ‚úÖ Dashboard HTML: {len(html)} characters")
                    if "Real-time Code Analysis Dashboard" in html:
                        print("      ‚Ä¢ Title found in HTML ‚úÖ")
                    if "WebSocket" in html:
                        print("      ‚Ä¢ WebSocket support detected ‚úÖ")
                else:
                    print(f"   ‚ùå Dashboard HTML: {response.status}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå API test failed: {e}")
            return False


async def test_websocket_connection(dashboard_url: str = "http://localhost:8090"):
    """Test WebSocket real-time connection"""
    print("\nüîå WEBSOCKET CONNECTION TEST")
    print("=" * 50)
    
    import aiohttp
    
    # Convert HTTP URL to WebSocket URL
    ws_url = dashboard_url.replace("http://", "ws://") + "/ws"
    
    try:
        async with aiohttp.ClientSession() as session:
            print(f"Connecting to: {ws_url}")
            
            async with session.ws_connect(ws_url) as ws:
                print("‚úÖ WebSocket connected successfully")
                
                # Listen for initial messages
                message_count = 0
                timeout_seconds = 10
                
                print(f"Listening for messages for {timeout_seconds} seconds...")
                
                try:
                    async with asyncio.timeout(timeout_seconds):
                        async for msg in ws:
                            if msg.type == aiohttp.WSMsgType.TEXT:
                                try:
                                    data = json.loads(msg.data)
                                    msg_type = data.get('type', 'unknown')
                                    timestamp = data.get('timestamp', 'unknown')
                                    payload = data.get('payload', {})
                                    
                                    print(f"   üì® Message {message_count + 1}: {msg_type}")
                                    
                                    if msg_type == 'metrics':
                                        files_watched = payload.get('total_files_watched', 0)
                                        changes = payload.get('changes_detected', 0)
                                        print(f"      ‚Ä¢ Files: {files_watched}, Changes: {changes}")
                                    elif msg_type == 'system_status':
                                        status = payload.get('realtime_status', 'unknown')
                                        print(f"      ‚Ä¢ Real-time status: {status}")
                                    
                                    message_count += 1
                                    
                                    if message_count >= 3:  # Stop after a few messages
                                        break
                                        
                                except json.JSONDecodeError:
                                    print(f"   ‚ö†Ô∏è Invalid JSON message: {msg.data}")
                                    
                            elif msg.type == aiohttp.WSMsgType.ERROR:
                                print(f"   ‚ùå WebSocket error: {ws.exception()}")
                                break
                
                except asyncio.TimeoutError:
                    print(f"   ‚è∞ Timeout after {timeout_seconds} seconds")
                
                print(f"‚úÖ Received {message_count} messages via WebSocket")
                return True
                
    except Exception as e:
        print(f"‚ùå WebSocket test failed: {e}")
        return False


async def simulate_file_changes():
    """Simulate file changes to test real-time monitoring"""
    print("\nüìù FILE CHANGE SIMULATION")
    print("=" * 50)
    
    # Create a test file in the watched directory
    test_file = project_root / "src" / "cryptotrading" / "test_dashboard_changes.py"
    
    try:
        # Create initial file
        test_content = '''"""
Test file for dashboard change monitoring
"""

class DashboardTestClass:
    """A test class for dashboard monitoring"""
    
    def __init__(self, name: str):
        self.name = name
        self.created_at = "2024-01-01"
    
    def test_method(self, data: list) -> dict:
        """Test method for analysis"""
        return {"processed": len(data), "name": self.name}

def test_function():
    """A test function"""
    return "dashboard test"
'''
        
        print("1Ô∏è‚É£ Creating test file...")
        with open(test_file, 'w') as f:
            f.write(test_content)
        print(f"   ‚úÖ Created: {test_file.name}")
        
        # Wait for file watching to detect
        await asyncio.sleep(3)
        
        # Modify the file
        print("\n2Ô∏è‚É£ Modifying test file...")
        modified_content = test_content + '''

# Added new functionality for dashboard testing
def additional_test_function():
    """Additional function to test incremental analysis"""
    return "This was added to test real-time dashboard updates"

class ExtendedTestClass(DashboardTestClass):
    """Extended test class"""
    
    def extended_method(self):
        return f"Extended functionality for {self.name}"
'''
        
        with open(test_file, 'w') as f:
            f.write(modified_content)
        print(f"   ‚úÖ Modified: {test_file.name}")
        
        # Wait for analysis
        await asyncio.sleep(4)
        
        # Create another test file
        print("\n3Ô∏è‚É£ Creating second test file...")
        test_file2 = project_root / "src" / "cryptotrading" / "test_dashboard_additional.py"
        
        additional_content = '''"""
Additional test file for dashboard monitoring
"""

def dashboard_helper_function():
    """Helper function for dashboard testing"""
    return {"status": "dashboard_test", "timestamp": "2024-01-01"}

class DashboardHelperClass:
    """Helper class for dashboard testing"""
    
    def process_dashboard_data(self, data):
        return f"Processing {len(data) if data else 0} items"
'''
        
        with open(test_file2, 'w') as f:
            f.write(additional_content)
        print(f"   ‚úÖ Created: {test_file2.name}")
        
        # Wait for analysis
        await asyncio.sleep(4)
        
        print("\n‚úÖ File change simulation completed")
        print("   ‚Ä¢ Created 2 test files")
        print("   ‚Ä¢ Modified 1 test file")
        print("   ‚Ä¢ Total changes: 3")
        
        return [test_file, test_file2]
        
    except Exception as e:
        print(f"‚ùå File change simulation failed: {e}")
        return []


async def cleanup_test_files(test_files: list):
    """Clean up test files"""
    print("\nüßπ CLEANING UP TEST FILES")
    print("=" * 30)
    
    for test_file in test_files:
        try:
            if test_file.exists():
                test_file.unlink()
                print(f"   ‚úÖ Removed: {test_file.name}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Failed to remove {test_file.name}: {e}")


async def test_dashboard_integration(dashboard_url: str = "http://localhost:8090", 
                                   mcp_url: str = "http://localhost:8082"):
    """Test complete dashboard integration"""
    print("üéØ COMPLETE DASHBOARD INTEGRATION TEST")
    print("=" * 60)
    print("Testing: Dashboard + MCP + Real-time Monitoring + WebSocket")
    
    # Check dashboard availability
    print("\nüîç Checking dashboard availability...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{dashboard_url}/api/metrics") as response:
                if response.status != 200:
                    print(f"‚ùå Dashboard not available at {dashboard_url}")
                    return False
                print("‚úÖ Dashboard is running")
    except Exception as e:
        print(f"‚ùå Dashboard not accessible: {e}")
        return False
    
    # Test API endpoints
    api_success = await test_dashboard_api(dashboard_url)
    
    # Test WebSocket connection
    ws_success = await test_websocket_connection(dashboard_url)
    
    # Simulate file changes and test real-time updates
    print("\nüöÄ Testing real-time file monitoring...")
    test_files = await simulate_file_changes()
    
    # Wait for changes to be processed
    await asyncio.sleep(5)
    
    # Check if changes appear in dashboard
    print("\nüìä Verifying real-time updates...")
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{dashboard_url}/api/changes") as response:
                if response.status == 200:
                    data = await response.json()
                    recent_changes = data.get('recent_changes', [])
                    
                    # Look for our test file changes
                    test_changes = [c for c in recent_changes 
                                  if 'test_dashboard' in c.get('file_path', '')]
                    
                    print(f"   üìù Found {len(test_changes)} test file changes")
                    for change in test_changes[-3:]:  # Show last 3
                        file_name = Path(change.get('file_path', 'unknown')).name
                        change_type = change.get('change_type', 'unknown')
                        timestamp = change.get('timestamp', 'unknown')
                        print(f"      ‚Ä¢ {file_name} ({change_type}) at {timestamp}")
            
            # Check analyses
            async with session.get(f"{dashboard_url}/api/analyses") as response:
                if response.status == 200:
                    data = await response.json()
                    recent_analyses = data.get('recent_analyses', [])
                    
                    test_analyses = [a for a in recent_analyses 
                                   if 'test_dashboard' in a.get('file_path', '')]
                    
                    print(f"   üî¨ Found {len(test_analyses)} test file analyses")
                    for analysis in test_analyses[-2:]:  # Show last 2
                        file_name = Path(analysis.get('file_path', 'unknown')).name
                        symbols_count = len(analysis.get('symbols_found', []))
                        processing_time = analysis.get('processing_time', 0)
                        ai_insights = "ü§ñ" if analysis.get('ai_insights') else ""
                        print(f"      ‚Ä¢ {file_name}: {symbols_count} symbols, {processing_time:.2f}s {ai_insights}")
                    
        except Exception as e:
            print(f"   ‚ùå Failed to verify updates: {e}")
    
    # Clean up
    await cleanup_test_files(test_files)
    
    # Summary
    print(f"\nüéâ DASHBOARD INTEGRATION TEST COMPLETED!")
    print("=" * 60)
    print("‚úÖ Test Results:")
    print(f"   ‚Ä¢ API Endpoints: {'‚úÖ PASS' if api_success else '‚ùå FAIL'}")
    print(f"   ‚Ä¢ WebSocket Connection: {'‚úÖ PASS' if ws_success else '‚ùå FAIL'}")
    print(f"   ‚Ä¢ Real-time File Monitoring: {'‚úÖ PASS' if test_files else '‚ùå FAIL'}")
    print("   ‚Ä¢ Dashboard Web Interface: ‚úÖ AVAILABLE")
    
    success_count = sum([api_success, ws_success, bool(test_files)])
    total_tests = 3
    
    print(f"\nüìä Overall Result: {success_count}/{total_tests} tests passed")
    
    if success_count == total_tests:
        print("üéä ALL DASHBOARD TESTS PASSED!")
        print("\nüåê Dashboard is fully functional and ready to use!")
        print(f"   ‚Ä¢ Open: {dashboard_url}")
        print("   ‚Ä¢ Features: Real-time monitoring, AI insights, live updates")
    else:
        print("‚ö†Ô∏è Some tests failed. Check the logs above.")
    
    return success_count == total_tests


async def main():
    """Main test runner"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Test Real-time Dashboard")
    parser.add_argument("--dashboard-url", default="http://localhost:8090", help="Dashboard URL")
    parser.add_argument("--mcp-url", default="http://localhost:8082", help="MCP server URL")
    parser.add_argument("--api-only", action="store_true", help="Test API endpoints only")
    parser.add_argument("--websocket-only", action="store_true", help="Test WebSocket only")
    
    args = parser.parse_args()
    
    print("üß™ DASHBOARD TEST SUITE")
    print(f"Dashboard URL: {args.dashboard_url}")
    print(f"MCP Server URL: {args.mcp_url}")
    
    if args.api_only:
        success = await test_dashboard_api(args.dashboard_url)
    elif args.websocket_only:
        success = await test_websocket_connection(args.dashboard_url)
    else:
        success = await test_dashboard_integration(args.dashboard_url, args.mcp_url)
    
    if not success:
        print("\n‚ùå Dashboard tests failed")
        sys.exit(1)
    else:
        print("\n‚úÖ Dashboard tests completed successfully")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Dashboard test stopped")
    except Exception as e:
        print(f"‚ùå Test error: {e}")
        sys.exit(1)