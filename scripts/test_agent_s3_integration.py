#!/usr/bin/env python3
"""
Test S3 integration with Strands agents
"""

import sys
import os
import asyncio
import json
from datetime import datetime

# Add project root to path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

async def test_agent_s3_integration():
    """Test S3 integration with agents"""
    
    print("üß™ Testing S3 Integration with Strands Agents")
    print("=" * 60)
    
    # Validate environment variables are set
    aws_access_key = os.getenv('AWS_ACCESS_KEY_ID')
    aws_secret_key = os.getenv('AWS_SECRET_ACCESS_KEY')
    aws_region = os.getenv('AWS_DEFAULT_REGION', 'us-east-1')
    
    if not aws_access_key or not aws_secret_key:
        print("‚ùå AWS credentials not found in environment variables")
        print("   Set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY before running")
        return
    
    # Set environment to TESTING to skip database validation
    os.environ['ENVIRONMENT'] = 'testing'
    
    try:
        # Test 1: Import and create a basic Strands agent
        print("\n1. Testing Strands Agent Creation...")
        
        try:
            from src.cryptotrading.core.agents.strands import StrandsAgent
            from src.cryptotrading.infrastructure.analysis.mcp_agent_segregation import AgentContext, AgentRole
            
            # Create agent
            agent = StrandsAgent(
                agent_id="test_s3_agent",
                agent_type="testing",
                capabilities=["s3_logging", "testing"]
            )
            
            print("   ‚úÖ Strands agent created successfully")
            
            # Create agent context with proper parameters
            agent_context = AgentContext(
                agent_id="test_s3_agent",
                tenant_id="test_tenant",
                role=AgentRole.ANALYST  # Use analyst role for testing
            )
            
            agent.set_agent_context(agent_context)
            print("   ‚úÖ Agent context set")
            
        except Exception as e:
            print(f"   ‚ùå Agent creation failed: {e}")
            return False
        
        # Test 2: Test direct S3 logging
        print("\n2. Testing Direct S3 Logging...")
        
        try:
            # Test basic logging
            await agent.log_to_s3(
                message="Test message from Strands agent",
                level="info",
                activity_type="testing",
                data={"test_id": 1, "timestamp": datetime.now().isoformat()}
            )
            
            print("   ‚úÖ Basic S3 logging successful")
            
            # Test error logging
            try:
                raise ValueError("Test error for logging")
            except ValueError as e:
                await agent.log_error(e, context="S3 integration test")
                print("   ‚úÖ Error logging successful")
            
            # Test performance logging
            await agent.log_performance_metric(
                operation="test_operation",
                duration_ms=125.5,
                additional_metrics={
                    "cpu_usage": 45.2,
                    "memory_mb": 128.7
                }
            )
            
            print("   ‚úÖ Performance logging successful")
            
        except Exception as e:
            print(f"   ‚ùå Direct S3 logging failed: {e}")
            return False
        
        # Test 3: Test calculation result storage
        print("\n3. Testing Calculation Result Storage...")
        
        try:
            # Simulate MCTS calculation result
            await agent.store_calculation_result(
                calculation_type="mcts",
                input_parameters={
                    "symbol": "BTC-USD",
                    "iterations": 1000,
                    "exploration_param": 1.41
                },
                result={
                    "best_action": "buy",
                    "confidence": 0.85,
                    "expected_value": 1250.75,
                    "path_explored": 156
                },
                execution_time=2500.0,
                confidence=0.85
            )
            
            print("   ‚úÖ MCTS calculation result stored")
            
            # Simulate technical analysis result
            await agent.store_calculation_result(
                calculation_type="technical_analysis",
                input_parameters={
                    "symbol": "ETH-USD",
                    "indicators": ["RSI", "MACD", "Bollinger"]
                },
                result={
                    "rsi": 65.2,
                    "macd": {"value": 15.3, "signal": 12.8},
                    "bollinger": {"upper": 3250, "lower": 3150},
                    "recommendation": "hold"
                },
                execution_time=850.0,
                confidence=0.78
            )
            
            print("   ‚úÖ Technical analysis result stored")
            
        except Exception as e:
            print(f"   ‚ùå Calculation result storage failed: {e}")
        
        # Test 4: Test market analysis storage
        print("\n4. Testing Market Analysis Storage...")
        
        try:
            await agent.store_market_analysis(
                symbol="BTC-USD",
                analysis_type="sentiment_analysis",
                indicators={
                    "social_sentiment": 0.72,
                    "news_sentiment": 0.68,
                    "fear_greed_index": 58
                },
                signals={
                    "buy_signals": 3,
                    "sell_signals": 1,
                    "overall": "bullish"
                },
                recommendation="buy",
                timeframe="4h",
                confidence=0.71
            )
            
            print("   ‚úÖ Market analysis stored")
            
        except Exception as e:
            print(f"   ‚ùå Market analysis storage failed: {e}")
        
        # Test 5: Test agent state backup
        print("\n5. Testing Agent State Backup...")
        
        try:
            agent_state = {
                "current_positions": {
                    "BTC-USD": {"quantity": 1.5, "avg_price": 62000},
                    "ETH-USD": {"quantity": 10.0, "avg_price": 3100}
                },
                "risk_parameters": {
                    "max_position_size": 0.25,
                    "stop_loss_pct": 0.05
                },
                "strategy_state": {
                    "active_strategies": ["momentum", "mean_reversion"],
                    "last_rebalance": datetime.now().isoformat()
                }
            }
            
            backup_result = await agent.backup_agent_state(
                state_data=agent_state,
                configuration={
                    "model_provider": "grok4",
                    "risk_tolerance": "moderate"
                },
                version="1.2"
            )
            
            if backup_result and backup_result.get("success"):
                print("   ‚úÖ Agent state backup successful")
            else:
                print(f"   ‚ö†Ô∏è  Agent state backup result: {backup_result}")
            
        except Exception as e:
            print(f"   ‚ùå Agent state backup failed: {e}")
        
        # Test 6: Test MCP tools integration
        print("\n6. Testing MCP Tools Integration...")
        
        try:
            from src.cryptotrading.infrastructure.analysis.all_segregated_mcp_tools import (
                create_all_segregated_tools, get_all_mcp_tools_with_schemas
            )
            
            # Get all tools including S3 tools
            all_tools = create_all_segregated_tools()
            tool_schemas = get_all_mcp_tools_with_schemas()
            
            s3_tool_count = sum(1 for name in all_tools.keys() if 's3' in name.lower() or 'storage' in name.lower())
            s3_schema_count = sum(1 for tool in tool_schemas if 's3' in tool.get('name', '').lower() or 'storage' in tool.get('name', '').lower())
            
            print(f"   ‚úÖ Total MCP tools: {len(all_tools)}")
            print(f"   ‚úÖ S3-related tools: {s3_tool_count}")
            print(f"   ‚úÖ S3 tool schemas: {s3_schema_count}")
            
            # Test specific S3 tool if available
            if 'log_agent_activity' in all_tools:
                print("   ‚úÖ S3 logging tools properly integrated")
            else:
                print("   ‚ö†Ô∏è  S3 logging tools not found in MCP tools")
            
        except Exception as e:
            print(f"   ‚ùå MCP tools integration test failed: {e}")
        
        # Test 7: Test workflow execution with logging
        print("\n7. Testing Workflow Execution with S3 Logging...")
        
        try:
            # Create a simple workflow
            workflow_inputs = {
                "symbol": "BTC-USD",
                "operation": "analysis",
                "parameters": {"timeframe": "1h", "indicators": ["RSI", "MACD"]}
            }
            
            # This will automatically use the @log_agent_method decorator
            await agent.process_workflow("test_workflow_123", workflow_inputs)
            
            print("   ‚úÖ Workflow execution with logging successful")
            
        except Exception as e:
            print(f"   ‚ùå Workflow execution test failed: {e}")
        
        # Test 8: Verify data is in S3
        print("\n8. Verifying Data in S3...")
        
        try:
            # Use our S3 verification script
            import subprocess
            result = subprocess.run(
                [sys.executable, "scripts/verify_s3_data.py"], 
                capture_output=True, 
                text=True,
                timeout=30
            )
            
            if "agent-logs" in result.stdout or "agent-data" in result.stdout:
                print("   ‚úÖ Agent data found in S3 bucket")
            else:
                print("   ‚ö†Ô∏è  Agent data not yet visible in S3 (may need time for indexing)")
            
        except Exception as e:
            print(f"   ‚ùå S3 verification failed: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Overall test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Main test function"""
    
    print("üöÄ Strands Agents S3 Integration Test")
    print("=" * 70)
    
    success = await test_agent_s3_integration()
    
    if success:
        print("\nüéâ S3 INTEGRATION WITH STRANDS AGENTS SUCCESSFUL!")
        print("‚úÖ All agents now have comprehensive S3 logging capabilities")
        print("‚úÖ Agent activities, calculations, and states are stored in S3")
        print("‚úÖ MCP tools include S3 storage functionality")
        print("üöÄ Ready for production use with full observability!")
    else:
        print("\n‚ùå S3 integration test failed - see errors above")

if __name__ == "__main__":
    asyncio.run(main())