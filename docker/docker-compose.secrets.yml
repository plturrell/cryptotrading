# 🔐 Docker Compose with Secret Management
version: '3.8'

services:
  cryptotrading:
    build:
      context: ..
      dockerfile: docker/secrets.dockerfile
    
    # 🔐 Secret management options (choose one):
    
    # Option 1: Environment file mount
    env_file:
      - ../.env
    
    # Option 2: Docker secrets (recommended for production)
    secrets:
      - app-secrets
    
    # Option 3: Direct environment variables
    environment:
      - GROK4_API_KEY=${GROK4_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
    
    # 🔐 Volume mount for secret files (alternative)
    volumes:
      - ../secrets:/app/secrets:ro  # Mount secrets directory read-only
      - app-data:/app/data
    
    ports:
      - "8000:8000"
    
    networks:
      - cryptotrading-network
    
    # 🔍 Health check
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # 🚀 Deployment configuration
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    
    depends_on:
      - redis
      - postgres

  # 📊 Redis for caching
  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    networks:
      - cryptotrading-network
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpass}

  # 🗄️ PostgreSQL for data storage
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cryptotrading
      POSTGRES_USER: ${POSTGRES_USER:-cryptouser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cryptopass}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - cryptotrading-network
    ports:
      - "5432:5432"

# 🔐 Docker secrets configuration
secrets:
  app-secrets:
    file: ../secrets/production.env  # Create this file with your secrets

# 💾 Persistent volumes
volumes:
  app-data:
  redis-data:
  postgres-data:

# 🌐 Network configuration
networks:
  cryptotrading-network:
    driver: bridge

# 🧪 Development override
# Use: docker-compose -f docker-compose.secrets.yml -f docker-compose.dev.yml up
---
version: '3.8'

# Development overrides
services:
  cryptotrading:
    environment:
      - ENVIRONMENT=development
      - USE_REAL_APIS=false
    
    volumes:
      - ../:/app  # Mount source code for development
      - /app/node_modules  # Preserve node_modules
    
    command: python -m flask run --host=0.0.0.0 --port=8000 --debug
