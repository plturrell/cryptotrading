# HAProxy Load Balancer Configuration for MCP Servers
# Alternative to NGINX with advanced load balancing features

global
    maxconn 4096
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    
    # SSL/TLS settings
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+AES256:ECDHE+AES128
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    tune.ssl.default-dh-param 2048

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  http-server-close
    option  forwardfor except 127.0.0.0/8
    option  redispatch
    retries 3
    timeout connect 5s
    timeout client  30s
    timeout server  30s
    timeout http-request 10s
    timeout queue   1m
    timeout check   10s
    maxconn 3000

# Statistics
stats enable
stats uri /haproxy-stats
stats realm HAProxy\ Statistics
stats auth admin:secure_password_here

# Frontend for HTTP -> HTTPS redirect
frontend http_front
    bind *:80
    redirect scheme https code 301 if !{ ssl_fc }

# Main HTTPS frontend
frontend https_front
    bind *:443 ssl crt /etc/haproxy/certs/rex.com.pem
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-response set-header X-Content-Type-Options "nosniff"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    
    # ACLs for routing
    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_vercel path_beg /api/mcp/
    acl is_enhanced path_beg /mcp/v2/
    acl is_realtime path_beg /mcp/ws/
    acl is_discovery path_beg /tools/discover
    acl is_health path /health
    
    # Health check response
    http-request return status 200 content-type "application/json" lf-string "{\"status\":\"healthy\"}" if is_health
    
    # Route to appropriate backend
    use_backend mcp_websocket if is_websocket is_realtime
    use_backend mcp_vercel if is_vercel
    use_backend mcp_enhanced if is_enhanced
    use_backend mcp_discovery if is_discovery
    default_backend mcp_enhanced

# Vercel serverless backend
backend mcp_vercel
    balance leastconn
    option httpchk GET /api/mcp/health
    
    # Retry policy
    retry-on all-retryable-errors
    http-request disable-l7-retry if METH_POST
    
    # Circuit breaker
    option redispatch
    option allbackups
    
    # Servers with health checks
    server vercel1 mcp-vercel-1.rex.com:443 ssl verify none check inter 5s rise 2 fall 3 weight 3
    server vercel2 mcp-vercel-2.rex.com:443 ssl verify none check inter 5s rise 2 fall 3 weight 3
    server vercel3 mcp-vercel-3.rex.com:443 ssl verify none check inter 5s rise 2 fall 3 weight 2
    server vercel-backup mcp-vercel-backup.rex.com:443 ssl verify none check inter 5s rise 2 fall 3 weight 1 backup

# Enhanced V2 backend
backend mcp_enhanced
    balance roundrobin
    cookie MCPSRV insert indirect nocache
    option httpchk GET /health
    
    # Session persistence
    stick-table type string len 32 size 100k expire 30m
    stick on cookie(MCPSRV)
    
    # Connection pooling
    http-reuse safe
    
    # Servers
    server enhanced1 mcp-enhanced-1.internal:8000 check inter 3s rise 2 fall 3 weight 5 cookie e1
    server enhanced2 mcp-enhanced-2.internal:8000 check inter 3s rise 2 fall 3 weight 5 cookie e2
    server enhanced3 mcp-enhanced-3.internal:8000 check inter 3s rise 2 fall 3 weight 3 cookie e3
    server enhanced4 mcp-enhanced-4.internal:8000 check inter 3s rise 2 fall 3 weight 2 cookie e4

# WebSocket backend for real-time
backend mcp_websocket
    balance source
    option http-server-close
    option forceclose
    
    # WebSocket specific timeouts
    timeout tunnel 1h
    timeout client-fin 30s
    
    # Servers
    server ws1 mcp-ws-1.internal:8080 check inter 5s rise 2 fall 3 weight 4
    server ws2 mcp-ws-2.internal:8080 check inter 5s rise 2 fall 3 weight 4
    server ws3 mcp-ws-3.internal:8080 check inter 5s rise 2 fall 3 weight 2

# Discovery service backend
backend mcp_discovery
    balance leastconn
    option httpchk GET /health
    
    # Cache headers
    http-response set-header Cache-Control "public, max-age=300"
    
    # Servers
    server discovery1 mcp-discovery-1.internal:8001 check inter 5s rise 2 fall 3
    server discovery2 mcp-discovery-2.internal:8001 check inter 5s rise 2 fall 3

# Listen for admin stats
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats show-node
    stats auth admin:admin

# Advanced health checking backend
backend health_check
    option httpchk
    http-check send meth GET uri /health
    http-check expect status 200
    
    server health1 127.0.0.1:8090 check