# NGINX Load Balancer Configuration for MCP Servers
# Provides load balancing, health checks, and failover for MCP infrastructure

# Upstream definitions for different MCP server types
upstream mcp_vercel_servers {
    # Vercel serverless instances
    least_conn;  # Use least connections algorithm
    
    server mcp-vercel-1.rex.com:443 weight=3 max_fails=2 fail_timeout=30s;
    server mcp-vercel-2.rex.com:443 weight=3 max_fails=2 fail_timeout=30s;
    server mcp-vercel-3.rex.com:443 weight=2 max_fails=2 fail_timeout=30s;
    
    # Backup server
    server mcp-vercel-backup.rex.com:443 backup;
    
    # Keep alive connections
    keepalive 32;
}

upstream mcp_enhanced_servers {
    # Enhanced V2 standalone servers
    ip_hash;  # Session persistence based on IP
    
    server mcp-enhanced-1.internal:8000 weight=5 max_fails=3 fail_timeout=60s;
    server mcp-enhanced-2.internal:8000 weight=5 max_fails=3 fail_timeout=60s;
    server mcp-enhanced-3.internal:8000 weight=3 max_fails=3 fail_timeout=60s;
    server mcp-enhanced-4.internal:8000 weight=2 max_fails=3 fail_timeout=60s;
    
    keepalive 64;
}

upstream mcp_realtime_servers {
    # WebSocket servers for real-time communication
    hash $request_uri consistent;  # Consistent hashing for WebSocket
    
    server mcp-ws-1.internal:8080 weight=4;
    server mcp-ws-2.internal:8080 weight=4;
    server mcp-ws-3.internal:8080 weight=2;
    
    keepalive 128;
}

upstream mcp_discovery_servers {
    # Tool discovery service
    least_conn;
    
    server mcp-discovery-1.internal:8001;
    server mcp-discovery-2.internal:8001;
    
    keepalive 16;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=mcp_general:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=mcp_api:10m rate=50r/s;
limit_req_zone $binary_remote_addr zone=mcp_ws:10m rate=200r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=mcp_conn:10m;

# Cache zones
proxy_cache_path /var/cache/nginx/mcp levels=1:2 keys_zone=mcp_cache:100m max_size=1g inactive=60m use_temp_path=off;

# Main server configuration
server {
    listen 80;
    listen [::]:80;
    server_name api.rex.com mcp.rex.com;
    
    # Redirect to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.rex.com mcp.rex.com;
    
    # SSL configuration
    ssl_certificate /etc/nginx/ssl/rex.com.crt;
    ssl_certificate_key /etc/nginx/ssl/rex.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Logging
    access_log /var/log/nginx/mcp_access.log combined;
    error_log /var/log/nginx/mcp_error.log warn;
    
    # Default timeouts
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    
    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type "application/json";
        return 200 '{"status":"healthy","service":"mcp-loadbalancer","timestamp":"$date_gmt"}';
    }
    
    # Tool discovery service
    location /tools/discover {
        limit_req zone=mcp_api burst=20 nodelay;
        limit_conn mcp_conn 10;
        
        proxy_pass http://mcp_discovery_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Caching for discovery
        proxy_cache mcp_cache;
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # Vercel serverless MCP endpoints
    location ~ ^/api/mcp/(.*)$ {
        limit_req zone=mcp_api burst=50 nodelay;
        limit_conn mcp_conn 20;
        
        proxy_pass https://mcp_vercel_servers/api/mcp/$1$is_args$args;
        proxy_http_version 1.1;
        
        # Headers for serverless
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Connection "";
        
        # Timeouts for serverless
        proxy_connect_timeout 10s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Circuit breaker
        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
    }
    
    # Enhanced V2 MCP endpoints
    location ~ ^/mcp/v2/(.*)$ {
        limit_req zone=mcp_general burst=100 nodelay;
        limit_conn mcp_conn 50;
        
        proxy_pass http://mcp_enhanced_servers/v2/$1$is_args$args;
        proxy_http_version 1.1;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Keep-alive for enhanced servers
        proxy_set_header Connection "keep-alive";
        proxy_buffering off;
        
        # Longer timeouts for complex operations
        proxy_read_timeout 600s;
        
        # Retry logic
        proxy_next_upstream error timeout http_502 http_503;
        proxy_next_upstream_tries 2;
    }
    
    # WebSocket endpoints for real-time MCP
    location ~ ^/mcp/ws/(.*)$ {
        limit_req zone=mcp_ws burst=100 nodelay;
        limit_conn mcp_conn 100;
        
        proxy_pass http://mcp_realtime_servers/ws/$1$is_args$args;
        proxy_http_version 1.1;
        
        # WebSocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
        
        # Disable buffering for WebSocket
        proxy_buffering off;
    }
    
    # Static OpenAPI documentation
    location /docs/openapi {
        alias /var/www/mcp/openapi;
        try_files $uri $uri/ =404;
        
        # Cache static files
        expires 1h;
        add_header Cache-Control "public, immutable";
    }
    
    # Metrics endpoint (internal only)
    location /metrics {
        allow 10.0.0.0/8;
        deny all;
        
        stub_status;
    }
    
    # Default fallback
    location / {
        return 404 '{"error":"Not Found","message":"Invalid MCP endpoint"}';
        add_header Content-Type "application/json";
    }
}

# Health check server (internal)
server {
    listen 8090;
    server_name localhost;
    
    location /nginx_health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type "text/plain";
    }
    
    location /upstream_health {
        access_log off;
        
        # Check upstream health
        proxy_pass http://mcp_enhanced_servers/health;
        proxy_connect_timeout 1s;
        proxy_read_timeout 1s;
    }
}